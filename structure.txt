# Cyber Framework Project Structure and Overview

The Cyber Framework is a hypermedia-driven web framework built with Deno, leveraging HTMX, Alpine.js, and Deno KV for state management. The project emphasizes using native Deno TypeScript code, hypermedia patterns, and native Deno features. Below is a comprehensive explanation of the project's structure and how each component works.

## Project Structure

The project follows a structured directory layout to organize code logically:

```
/
├── app/
│   ├── api/           # REST API endpoints
│   │   └── v1/
│   │       └── counter.ts     # Counter API endpoints
│   ├── auth/          # Authentication logic
│   │   ├── middleware.ts     # Authentication middleware
│   │   ├── oauth.ts          # OAuth handling
│   │   └── providers/        # OAuth provider configurations
│   │       ├── github.ts
│   │       └── google.ts
│   ├── components/    # UI components
│   │   ├── auth/
│   │   │   └── login.ts      # Login component
│   │   ├── Counter/
│   │   │   ├── counter.ts    # Counter component logic
│   │   │   └── counter.css   # Counter component styles
│   │   └── nav/
│   │       ├── nav.ts        # Navigation component
│   │       └── nav.css       # Navigation styles
│   ├── styles/        # Global and component styles
│   │   ├── components/
│   │   │   ├── backgrounds.css
│   │   │   ├── buttons.css
│   │   │   ├── cards.css
│   │   │   ├── headers.css
│   │   └── global/
│   │       ├── reset.css
│   │       ├── utils.css
│   │       └── variables.css
│   ├── db.ts          # Database (Deno KV) initialization
│   ├── router.ts      # Main request router
│   ├── types.ts       # TypeScript type definitions
│   └── cli.ts         # Command-line interface script
├── public/            # Static assets (if any)
├── views/             # HTML templates
│   ├── home.html      # Home page template
│   └── layout.html    # Layout template
├── deno.json          # Deno configuration file
├── .env               # Environment variables (not committed)
└── server.ts          # Entry point of the application
```

## Explanation of Key Components

### Entry Point (`server.ts`)

- This is the starting point of the application. It imports necessary modules, sets up the server, and starts listening on a specified port.
- Uses `Deno.serve` (native to Deno 2.0.6) to start the server.

### Routing (`app/router.ts`)

- The router handles incoming HTTP requests and dispatches them to appropriate handlers based on the URL path and HTTP method.
- It includes routes for static files (like CSS), the home page, API endpoints, and component-specific routes.

### Authentication (`app/auth/`)

- **OAuth Providers (`app/auth/providers/`):** Configurations for OAuth providers like GitHub and Google.
  - For example, `github.ts` and `google.ts` use `@deno/kv-oauth` to create OAuth configurations.
- **OAuth Handling (`app/auth/oauth.ts`):** Contains functions to handle OAuth sign-in, callbacks, and sign-out using `@deno/kv-oauth`.
- **Middleware (`app/auth/middleware.ts`):** Middleware to check for user sessions and authenticate requests. It utilizes Deno KV to store and retrieve session data.

### Components (`app/components/`)

Components are modular units of the UI, each with their own logic and styles.

#### Counter Component (`app/components/Counter/`)

- **`counter.ts`:** Contains the logic for the counter, including functions to get, increment, and decrement the count stored in Deno KV.
- **`counter.css`:** Styles specific to the counter component.
- **Functionality:**
  - Renders the counter display and controls.
  - Uses HTMX for hypermedia-driven interactions (e.g., via `hx-post` and `hx-target` attributes).
  - Employs Alpine.js for reactive interactivity, particularly for WebSocket connections to receive real-time updates.

#### Navigation Component (`app/components/nav/`)

- **`nav.ts`:** Renders the navigation bar, which adapts based on whether a user is logged in or not.
- **`nav.css`:** Styles specific to the navigation component.
- **Functionality:**
  - Displays links or buttons for login/logout.
  - Uses hypermedia patterns to update the UI based on authentication state.

#### Authentication Component (`app/components/auth/`)

- **`login.ts`:** Renders the login page with options to sign in via different OAuth providers.

### API Endpoints (`app/api/`)

- **Counter API (`app/api/v1/counter.ts`):**
  - Provides RESTful endpoints to get, increment, and decrement the counter.
  - Endpoints:
    - `GET /api/v1/counter` - Returns the current count.
    - `POST /api/v1/counter/increment` - Increments the count.
    - `POST /api/v1/counter/decrement` - Decrements the count.
  - Uses Deno KV for data persistence.

### Database (`app/db.ts`)

- Initializes the connection to Deno KV, which is a key-value store used for data persistence and session management.

### Views (`views/`)

- **`home.html`:** The main HTML template for the home page.
  - Includes components like the header, counter, and feature cards.
  - References component styles and scripts like HTMX and Alpine.js.
- **`layout.html`:** A generic layout template that can be used to wrap other content, utilizing template variables like `${title}` and `${children}`.

### Styles (`app/styles/`)

Styles are organized into global styles and component-specific styles.

- **Global Styles (`app/styles/global/`):**
  - **`reset.css`:** Resets default browser styles for consistency.
  - **`variables.css`:** Defines CSS variables for consistent theming.
  - **`utils.css`:** Contains utility classes for common styling patterns.
- **Component Styles (`app/styles/components/`):**
  - Styles specific to UI components like buttons, cards, headers, backgrounds, etc.
  - These styles are included in the relevant templates to style the components appropriately.

### Type Definitions (`app/types.ts`)

- Defines TypeScript interfaces for data structures like `User`, `Session`, and `Context`.
- Ensures type safety and clarity throughout the codebase.

### Configuration (`deno.json`)

- Deno configuration file that specifies compiler options, tasks, and import maps.
- **Compiler Options:**
  - Enforces strict TypeScript settings, such as `"strict": true` and `"noImplicitAny": true`.
- **Tasks:**
  - Defines scripts like `dev`, `start`, `cli`, and `cli:dev` for running the application and CLI.
- **Imports:**
  - Maps module names to dependencies, e.g., `@deno/kv-oauth` and `@std/dotenv`.
- **Deployment Configuration:**
  - Contains settings for deploying the application, including project ID, entry point, and file exclusions.

### Environment Variables (`.env`)

- Stores sensitive configuration data, such as OAuth client IDs and secrets.
- Not committed to version control to protect sensitive information.

### Command-Line Interface (`app/cli.ts`)

- Provides a CLI for interacting with the application via the command line.
- Supports operations like viewing and modifying the counter.
- Demonstrates how to make HTTP requests to the application's API endpoints.

## How It All Works Together

1. **Server Initialization:**
   - The application starts with `server.ts`, which uses `Deno.serve` to listen for incoming HTTP requests.
   - Requests are passed to the `handleRequest` function in `app/router.ts`.

2. **Request Routing:**
   - The router analyzes the request's URL and method to determine the appropriate handler.
   - Static files like CSS are served directly from the filesystem.
   - Routes are categorized into:
     - **Home Page**: Serves the `home.html` template.
     - **API Routes**: Handle JSON endpoints under `/api/v1/`.
     - **Component Routes**: Handle hypermedia-driven interactions under `/components/`.
     - **Authentication Routes**: Managed by the OAuth handlers.

3. **Authentication Flow:**
   - When a user attempts to sign in, they are redirected to the OAuth provider's authorization page.
   - After successful authentication, the OAuth callback is handled to establish a session.
   - Sessions are stored in Deno KV for persistence.
   - The `authMiddleware` checks for active sessions and adds user information to the request context.

4. **State Management and Persistence:**
   - Deno KV is used throughout the application to store data persistently.
   - The counter value, sessions, and any other persistent data are stored in KV.

5. **Components and Hypermedia:**
   - UI components are rendered on the server and sent to the client as HTML.
   - HTMX is used to facilitate dynamic, server-driven UI updates without full page reloads.
   - Alpine.js provides lightweight client-side interactivity, such as handling WebSocket connections for real-time updates.

6. **Real-Time Updates:**
   - The Counter component establishes a WebSocket connection to receive real-time updates.
   - When the counter is incremented or decremented, all connected clients receive the updated count.

7. **Styling and Theming:**
   - The application uses CSS files to style components, focusing on a cyberpunk aesthetic.
   - CSS variables and responsive design techniques ensure consistency and adaptability across devices.

8. **Type Safety and Best Practices:**
   - The use of TypeScript interfaces and strict compiler options enforces type safety.
   - The codebase follows development guidelines to maintain clarity, security, and performance.

## Conclusion

The Cyber Framework integrates Deno's native capabilities with hypermedia principles to create a modern, efficient, and secure web application. By organizing code into logical directories, co-locating component files, and adhering to best practices, the framework provides a solid foundation for building scalable web applications.

This explanation aims to provide both humans and language models with a clear understanding of the project's structure and how each part contributes to the overall functionality.